- block:

    - name: Create a local temporary directory
      shell: mktemp -d /tmp/ansible_test.XXXXXXXXX
      register: tempfile_result
      delegate_to: localhost

    - set_fact:
        local_temp_dir: '{{ tempfile_result.stdout }}'
        remote_dir: '{{ remote_tmp_dir }}/copy'
        symlinks:
          ansible-test-abs-link: /tmp/ansible-test-abs-link
          ansible-test-abs-link-dir: /tmp/ansible-test-abs-link-dir
          circles: ../
          invalid: invalid
          invalid2: ../invalid
          out_of_tree_circle: /tmp/ansible-test-link-dir/out_of_tree_circle
          subdir3: ../subdir2/subdir3
          bar.txt: ../bar.txt

    - file: path={{local_temp_dir}} state=directory
      name: ensure temp dir exists

    # file cannot do this properly, use command instead
    - name: Create symbolic link
      command: "ln -s '{{ item.value }}' '{{ item.key }}'"
      args:
        chdir: '{{role_path}}/files/subdir/subdir1'
      with_dict: "{{ symlinks }}"
      delegate_to: localhost

    - name: Create group for remote unprivileged user
      group:
        name: '{{ remote_unprivileged_user_group }}'
      register: group

    - name: Create remote unprivileged remote user
      user:
        name: '{{ remote_unprivileged_user }}'
        group: '{{ remote_unprivileged_user_group }}'
      register: user

    - name: Check sudoers dir
      stat:
        path: /etc/sudoers.d
      register: etc_sudoers

    - name: Set sudoers.d path fact
      set_fact:
        sudoers_d_file: "{{ '/etc/sudoers.d' if etc_sudoers.stat.exists else '/usr/local/etc/sudoers.d' }}/{{ remote_unprivileged_user }}"

    - name: Create sudoers file
      copy:
        dest: "{{ sudoers_d_file }}"
        content: "{{ remote_unprivileged_user }} ALL=(ALL) NOPASSWD: ALL"

    - file:
        path: "{{ user.home }}/.ssh"
        owner: '{{ remote_unprivileged_user }}'
        state: directory
        mode: 0700

    - name: Duplicate authorized_keys
      copy:
        src: $HOME/.ssh/authorized_keys
        dest: '{{ user.home }}/.ssh/authorized_keys'
        owner: '{{ remote_unprivileged_user }}'
        mode: 0600
        remote_src: yes

    - file:
        path: "{{ remote_dir }}"
        state: directory
      remote_user: '{{ remote_unprivileged_user }}'

    # execute tests tasks using an unprivileged user, this is useful to avoid
    # local/remote ambiguity when controller and managed hosts are identical.
    - import_tasks: tests.yml
      remote_user: '{{ remote_unprivileged_user }}'

    - import_tasks: acls.yml
      when: ansible_system == 'Linux'

    - import_tasks: selinux.yml
      when: ansible_os_family == 'RedHat' and ansible_selinux.get('mode') == 'enforcing'

    - import_tasks: setgid.yml

    - import_tasks: no_log.yml
      delegate_to: localhost

    - import_tasks: check_mode.yml

    # https://github.com/ansible/ansible/issues/57618
    # https://github.com/ansible/ansible/issues/79749
    - name: Test diff contents
      copy:
        content: 'Ansible managed\n'
        dest: "{{ local_temp_dir }}/file.txt"
      diff: yes
      register: diff_output

    - assert:
        that:
          - 'diff_output.diff[0].before == ""'
          - '"Ansible managed" in diff_output.diff[0].after'
          - '"file.txt" in diff_output.diff[0].after_header'

    - name: create directory for multi diff test
      file:
        path: "{{ role_path }}/files/multi-diff-test"
        state: directory
      delegate_to: localhost

    - name: create subdirectory for multi diff test
      file:
        path: "{{ role_path }}/files/multi-diff-test/dir"
        state: directory
      delegate_to: localhost

    - name: create file for multi diff test
      copy:
        dest: "{{ role_path }}/files/multi-diff-test/file"
        content: "hello, world!\n"
      delegate_to: localhost

    - name: create symlink
      file:
        path: "{{ role_path }}/files/multi-diff-test/link2file"
        state: link
        src: file
      delegate_to: localhost

    - name: multi diff test
      copy:
        src: "{{ role_path }}/files/multi-diff-test"
        dest: "{{ local_temp_dir }}/multi-diff-test"
        local_follow: false
      register: multi_diff_test
      diff: true

    # right now it returns exactly 3, but if/when the copy module is updated to produce attribute
    # diffs, there will be more.
    - name: assert that multi_diff_test.diff is a list of minimum length 3
      assert:
        that:
          - multi_diff_test.diff is not string and multi_diff_test.diff is not mapping and multi_diff_test.diff is iterable
          - multi_diff_test.diff | length >= 3

    - name: Check each diff for state=absent -> state=directory
      set_fact:
        found_absent_to_directory: true
      when:
        - item.before.state is defined and item.before.state == "absent"
        - item.after.state is defined and item.after.state == "directory"
      loop: "{{ multi_diff_test.diff }}"

    - name: assert that at least one diff reported state=absent -> state=directory
      assert:
        that:
          - found_absent_to_directory

    - name: Check each diff for state=absent -> state=link
      set_fact:
        found_absent_to_link: true
      when:
        - item.before.state is defined and item.before.state == "absent"
        - item.after.state is defined and item.after.state == "link"
      loop: "{{ multi_diff_test.diff }}"

    - name: assert that at least one diff reported state=absent -> state=link
      assert:
        that:
          - found_absent_to_link

    - name: Check each diff for new file content "hello, world!\n"
      set_fact:
        found_new_file_content: true
      when:
        - item.after is defined and item.after == "hello, world!\n"
      loop: "{{ multi_diff_test.diff }}"

    - name: assert that at least one diff reported new file content "hello, world!\n"
      assert:
        that:
          - found_new_file_content

    - name: tests with remote_src and non files
      import_tasks: src_remote_file_is_not_file.yml

  always:
    - name: Cleaning
      file:
        path: '{{ local_temp_dir }}'
        state: absent
      delegate_to: localhost

    - name: Remove symbolic link
      file:
        path: '{{ role_path }}/files/subdir/subdir1/{{ item.key }}'
        state: absent
      delegate_to: localhost
      with_dict: "{{ symlinks }}"

    - name: Remote unprivileged remote user
      user:
        name: '{{ remote_unprivileged_user }}'
        state: absent
        remove: yes
        force: yes

    - name: Remove group for remote unprivileged user
      group:
        name: '{{ remote_unprivileged_user_group }}'
        state: absent

    - name: Remove sudoers.d file
      file:
        path: "{{ sudoers_d_file }}"
        state: absent
